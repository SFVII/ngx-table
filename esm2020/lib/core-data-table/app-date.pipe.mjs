import { Pipe } from '@angular/core';
import { DatePipe } from '@angular/common';
import * as i0 from "@angular/core";
export class DateFormatConstants {
}
DateFormatConstants.dateLocalFr = 'fr-FR';
DateFormatConstants.dateLocalEn = 'en-EN';
DateFormatConstants.timezone = 'GMT+2';
DateFormatConstants.DATE_FMT_FR = 'dd/MM/yyyy';
DateFormatConstants.DATE_TIME_FMT_FR = `${DateFormatConstants.DATE_FMT_FR} - hh:mm`;
DateFormatConstants.DATE_FMT_EN = 'MM/dd/y';
DateFormatConstants.DATE_TIME_FMT_EN = `${DateFormatConstants.DATE_FMT_EN} - h:mm a`;
export var AppLanguages;
(function (AppLanguages) {
    AppLanguages["Fr"] = "fr";
    AppLanguages["En"] = "en";
})(AppLanguages || (AppLanguages = {}));
export class AppDatePipe {
    // @ts-ignore
    transform(value, lang, showDate = true) {
        const datePipe = new DatePipe(lang && lang == AppLanguages.Fr ? DateFormatConstants.dateLocalFr : DateFormatConstants.dateLocalEn);
        if (lang && lang == AppLanguages.Fr) {
            return datePipe.transform(value, showDate ? DateFormatConstants.DATE_TIME_FMT_FR : DateFormatConstants.DATE_FMT_FR, DateFormatConstants.timezone, DateFormatConstants.dateLocalFr);
        }
        else {
            return datePipe.transform(value, showDate ? DateFormatConstants.DATE_TIME_FMT_EN : DateFormatConstants.DATE_FMT_EN, DateFormatConstants.timezone, DateFormatConstants.dateLocalEn);
        }
    }
}
AppDatePipe.ɵfac = function AppDatePipe_Factory(t) { return new (t || AppDatePipe)(); };
AppDatePipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "appDate", type: AppDatePipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AppDatePipe, [{
        type: Pipe,
        args: [{
                name: 'appDate'
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWRhdGUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3RhYmxlL3NyYy9saWIvY29yZS1kYXRhLXRhYmxlL2FwcC1kYXRlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDOztBQUV6QyxNQUFNLE9BQU8sbUJBQW1COztBQUNaLCtCQUFXLEdBQUcsT0FBTyxDQUFDO0FBQ3RCLCtCQUFXLEdBQUcsT0FBTyxDQUFDO0FBRXRCLDRCQUFRLEdBQUcsT0FBTyxDQUFDO0FBRW5CLCtCQUFXLEdBQUcsWUFBWSxDQUFDO0FBQzNCLG9DQUFnQixHQUFHLEdBQUcsbUJBQW1CLENBQUMsV0FBVyxVQUFVLENBQUM7QUFFaEUsK0JBQVcsR0FBRyxTQUFTLENBQUM7QUFDeEIsb0NBQWdCLEdBQUcsR0FBRyxtQkFBbUIsQ0FBQyxXQUFXLFdBQVcsQ0FBQztBQUdyRixNQUFNLENBQU4sSUFBWSxZQUdYO0FBSEQsV0FBWSxZQUFZO0lBQ3BCLHlCQUFTLENBQUE7SUFDVCx5QkFBUyxDQUFBO0FBQ2IsQ0FBQyxFQUhXLFlBQVksS0FBWixZQUFZLFFBR3ZCO0FBS0QsTUFBTSxPQUFPLFdBQVc7SUFFcEIsYUFBYTtJQUNiLFNBQVMsQ0FBQyxLQUFVLEVBQUUsSUFBVSxFQUFFLFdBQXFCLElBQUk7UUFDdkQsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFFLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3BJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxZQUFZLENBQUMsRUFBRSxFQUFFO1lBQ2pDLE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN0TDthQUFNO1lBQ0gsT0FBTyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsbUJBQW1CLENBQUMsUUFBUSxFQUFFLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3RMO0lBQ0wsQ0FBQzs7c0VBVlEsV0FBVzsyRUFBWCxXQUFXO3VGQUFYLFdBQVc7Y0FIdkIsSUFBSTtlQUFDO2dCQUNGLElBQUksRUFBRSxTQUFTO2FBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RGF0ZVBpcGV9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmV4cG9ydCBjbGFzcyBEYXRlRm9ybWF0Q29uc3RhbnRzIHtcbiAgICBzdGF0aWMgcmVhZG9ubHkgZGF0ZUxvY2FsRnIgPSAnZnItRlInO1xuICAgIHN0YXRpYyByZWFkb25seSBkYXRlTG9jYWxFbiA9ICdlbi1FTic7XG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgdGltZXpvbmUgPSAnR01UKzInO1xuXG4gICAgc3RhdGljIHJlYWRvbmx5IERBVEVfRk1UX0ZSID0gJ2RkL01NL3l5eXknO1xuICAgIHN0YXRpYyByZWFkb25seSBEQVRFX1RJTUVfRk1UX0ZSID0gYCR7RGF0ZUZvcm1hdENvbnN0YW50cy5EQVRFX0ZNVF9GUn0gLSBoaDptbWA7XG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgREFURV9GTVRfRU4gPSAnTU0vZGQveSc7XG4gICAgc3RhdGljIHJlYWRvbmx5IERBVEVfVElNRV9GTVRfRU4gPSBgJHtEYXRlRm9ybWF0Q29uc3RhbnRzLkRBVEVfRk1UX0VOfSAtIGg6bW0gYWA7XG59XG5cbmV4cG9ydCBlbnVtIEFwcExhbmd1YWdlcyB7XG4gICAgRnIgPSAnZnInLFxuICAgIEVuID0gJ2VuJ1xufVxuXG5AUGlwZSh7XG4gICAgbmFtZTogJ2FwcERhdGUnXG59KVxuZXhwb3J0IGNsYXNzIEFwcERhdGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdHJhbnNmb3JtKHZhbHVlOiBhbnksIGxhbmc/OiBhbnksIHNob3dEYXRlPzogYm9vbGVhbiA9IHRydWUpOiBhbnkge1xuICAgICAgICBjb25zdCBkYXRlUGlwZSA9IG5ldyBEYXRlUGlwZShsYW5nICYmIGxhbmcgPT0gQXBwTGFuZ3VhZ2VzLkZyID8gRGF0ZUZvcm1hdENvbnN0YW50cy5kYXRlTG9jYWxGciA6ICBEYXRlRm9ybWF0Q29uc3RhbnRzLmRhdGVMb2NhbEVuKTtcbiAgICAgICAgaWYgKGxhbmcgJiYgbGFuZyA9PSBBcHBMYW5ndWFnZXMuRnIpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRlUGlwZS50cmFuc2Zvcm0odmFsdWUsIHNob3dEYXRlID8gRGF0ZUZvcm1hdENvbnN0YW50cy5EQVRFX1RJTUVfRk1UX0ZSIDogRGF0ZUZvcm1hdENvbnN0YW50cy5EQVRFX0ZNVF9GUiwgRGF0ZUZvcm1hdENvbnN0YW50cy50aW1lem9uZSwgRGF0ZUZvcm1hdENvbnN0YW50cy5kYXRlTG9jYWxGcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZVBpcGUudHJhbnNmb3JtKHZhbHVlLCBzaG93RGF0ZSA/IERhdGVGb3JtYXRDb25zdGFudHMuREFURV9USU1FX0ZNVF9FTiA6IERhdGVGb3JtYXRDb25zdGFudHMuREFURV9GTVRfRU4sIERhdGVGb3JtYXRDb25zdGFudHMudGltZXpvbmUsIERhdGVGb3JtYXRDb25zdGFudHMuZGF0ZUxvY2FsRW4pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iXX0=