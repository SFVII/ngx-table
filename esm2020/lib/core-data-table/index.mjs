import { BehaviorSubject, from } from 'rxjs';
import { debounceTime, pluck, share, switchMap } from 'rxjs/operators';
import { DataSource } from '@angular/cdk/collections';
export class CoreMatTable extends DataSource {
    constructor(data, sortRules, rangeRules, size = 20, detailRaws = true, emptyRow = false, filterT = {}, startswith = 0) {
        super();
        this.totalElements = 0;
        this.number = 0;
        this.startWith = 0;
        this._totalElements = new BehaviorSubject(0);
        this.emptyRow = false;
        this.filterTable = {};
        this.currentPage = 0;
        this.startWith = startswith;
        this.size = size;
        this.data = [...data];
        this.dataAfterSearch = [];
        this.backUpData = [...data];
        //this.totalElements = data.length;
        this.emptyRow = emptyRow;
        this.filterTable = filterT;
        this.pageSort = new BehaviorSubject(sortRules);
        this.pageFilterDate = new BehaviorSubject(null);
        this.pageFilter = new BehaviorSubject('');
        this.pageNumber = new BehaviorSubject(this.startWith);
        this.search = new BehaviorSubject('');
        this._totalElements.subscribe((page) => this.totalElements = page);
        this.page$ = this.pageSort.pipe(switchMap(sortAction => this.pageFilter.pipe(debounceTime(500))
            .pipe(switchMap(filter => this.search.pipe(switchMap(search => this.pageFilterDate.pipe(switchMap((range) => {
            this._totalElements.next(this.data.length);
            return this.pageNumber.pipe(switchMap(page => from([{
                    content: this.slice(this.sortData(this._search(search, this.filterData(this.filterDateRange(this.data, range), filter)), sortAction), page, this.size, detailRaws)
                }])), share());
        }))))))));
    }
    filterDateRange(data, range) {
        if (data && data.length && range.active && (range.valueEnd && range.valueStart) || (range.valueEnd && !range.valueStart) || (!range.valueEnd && range.valueStart)) {
            return data.filter((e) => {
                if (range.valueStart && range.valueEnd) {
                    return new Date(e[range.active]) >= new Date(range.valueStart)
                        && new Date(e[range.active]) <= new Date(range.valueEnd);
                }
                else if (range.valueStart && !range.valueEnd) {
                    return new Date(e[range.active]) >= new Date(range.valueStart);
                }
                else if (!range.valueStart && range.valueEnd) {
                    return new Date(e[range.active]) <= new Date(range.valueEnd);
                }
            });
        }
        else {
            return data;
        }
    }
    ponderation(str, searchKey) {
        let stack = str.split(' ');
        let pond = 0;
        for (let s of stack) {
            let search = s;
            if (search && search.includes(searchKey)) {
                pond++;
            }
        }
        return pond;
    }
    filterData(data, filter) {
        if (typeof filter === 'object' && Object.keys(filter).length) {
            delete filter.inputSearch;
            data = this.filterDataObject(data, filter);
        }
        this.dataAfterSearch = data;
        return data;
    }
    _search(filter, data) {
        const result = [];
        if (filter && filter.replace(/[^a-zA-Z ]/g, ' ')) {
            for (let e of data) {
                e.pond = 0;
                const dataRaw = JSON.stringify(e).toLowerCase()
                    .replace(/[^a-zA-Z0-9 ]/g, ' ');
                const stack = filter.toLowerCase().replace(/[^a-zA-Z0-9 ]/g, ' ')
                    .split(' ').filter((e) => e && e !== '');
                let combination = 0;
                for (let k of stack) {
                    if (dataRaw.includes(k)) {
                        e.pond += 1;
                        combination++;
                    }
                }
                if (e.pond >= 1 && combination === stack.length) {
                    result.push(e);
                }
            }
            return result.filter((e => e.pond > 0)).sort((a, b) => a > b ? 1 : (a < b ? -1 : 0));
        }
        else {
            return data;
        }
    }
    filterDataObject(data, filter) {
        const result = [];
        if (data && data.length && filter && Object.keys(filter).length > 0) {
            for (let e of data) {
                let ok = true;
                e.pond = 0;
                Object.keys(filter).forEach(key => {
                    try {
                        if (filter[String(key)].includes(e[String(key)])) {
                            //e.pond += 1;
                        }
                        else {
                            //e.pond = 0;
                            ok = false;
                        }
                    }
                    catch (e) {
                        console.log(e);
                    }
                });
                //if (e.pond) {
                if (ok) {
                    result.push(e);
                }
            }
            return result;
        }
        else {
            return data;
        }
    }
    setData(data) {
        this.data = [...data];
        this.pageNumber.next(0);
    }
    sortData(data, sortAction) {
        if (sortAction.direction !== '' && data && data.length) {
            return data.sort((a, b) => {
                return this.compare(a[sortAction.active], b[sortAction.active], sortAction.direction === 'asc');
            });
        }
        else {
            return data;
        }
    }
    compare(a, b, isAsc) {
        if (!a) {
            a = null;
        }
        if (!b) {
            b = null;
        }
        return (((Array.isArray(a) ? a.length : a) > ((Array.isArray(b) ? b.length : b)) ? -1 : ((Array.isArray(b) ? b.length : b)) > ((Array.isArray(a) ? a.length : a)) ? 1 : 0) * (isAsc ? -1 : 1));
    }
    fetch(page) {
        this.pageNumber.next(page);
    }
    sortIt(sortidea) {
        this.pageSort.next(sortidea);
    }
    filter(myFilter) {
        if (myFilter != undefined) {
            this.pageFilter.next(myFilter);
        }
    }
    filterDate(dateFilter) {
        this.pageFilterDate.next(dateFilter);
    }
    connect() {
        return this.page$.pipe(pluck('content'));
    }
    disconnect() {
    }
    slice(data, start = 0, end = 20, detailRow = true) {
        this._totalElements.next(data.length);
        const rows = data.length ? data.slice(start * end, (start * end) + end) : [];
        return rows;
    }
}
//# sourceMappingURL=data:application/json;base64,